{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar Http = function Http() {\n  (0, _classCallCheck2.default)(this, Http);\n\n  this.get = function _callee(url) {\n    var req, json;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regenerator.default.awrap(fetch(url));\n\n          case 3:\n            req = _context.sent;\n            _context.next = 6;\n            return _regenerator.default.awrap(req.json());\n\n          case 6:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"http get method err\", _context.t0);\n            throw Error(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  this.post = function _callee2(url, body) {\n    var req, json;\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regenerator.default.awrap(fetch(url, {\n              method: \"POST\",\n              body: body\n            }));\n\n          case 3:\n            req = _context2.sent;\n            _context2.next = 6;\n            return _regenerator.default.awrap(req.json());\n\n          case 6:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"http post method err\", _context2.t0);\n            throw Error(_context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\n\nHttp.instance = new Http();\nvar _default = Http;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/prog/cryptoTracker/src/libs/http.js"],"names":["Http","get","url","fetch","req","json","console","log","Error","post","body","method","instance"],"mappings":";;;;;;;;;;;IACMA,I;;;OAGFC,G,GAAM,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAGkBC,KAAK,CAACD,GAAD,CAHvB;;AAAA;AAGME,YAAAA,GAHN;AAAA;AAAA,8CAKmBA,GAAG,CAACC,IAAJ,EALnB;;AAAA;AAKMA,YAAAA,IALN;AAAA,6CAOSA,IAPT;;AAAA;AAAA;AAAA;AAUEC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAVF,kBAYQC,KAAK,aAZb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;OAgBNC,I,GAAO,kBAAOP,GAAP,EAAYQ,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAGiBP,KAAK,CAACD,GAAD,EAAM;AACvBS,cAAAA,MAAM,EAAE,MADe;AAEvBD,cAAAA,IAAI,EAAJA;AAFuB,aAAN,CAHtB;;AAAA;AAGKN,YAAAA,GAHL;AAAA;AAAA,8CAQkBA,GAAG,CAACC,IAAJ,EARlB;;AAAA;AAQKA,YAAAA,IARL;AAAA,8CAUQA,IAVR;;AAAA;AAAA;AAAA;AAaCC,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAbD,kBAeOC,KAAK,cAfZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;AAnBLR,I,CACKY,Q,GAAW,IAAIZ,IAAJ,E;eAsCPA,I","sourcesContent":["\r\nclass Http {\r\n    static instance = new Http();\r\n\r\n    get = async (url) => {\r\n        try {\r\n\r\n            let req = await fetch(url);\r\n\r\n            let json = await req.json();\r\n\r\n            return json;\r\n\r\n        } catch (err) {\r\n            console.log(\"http get method err\", err);\r\n\r\n            throw Error(err);\r\n        }\r\n    }\r\n\r\n    post = async (url, body) => {\r\n        try {\r\n\r\n            let req = await fetch(url, {\r\n                method: \"POST\",\r\n                body\r\n            });\r\n\r\n            let json = await req.json();\r\n\r\n            return json;\r\n\r\n        } catch (err) {\r\n            console.log(\"http post method err\", err);\r\n\r\n            throw Error(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Http;"]},"metadata":{},"sourceType":"script"}